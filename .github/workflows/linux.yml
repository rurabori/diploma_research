name: linux

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        include:
          - image: rurabori/diploma:ubuntu-20.04
            cc: clang-12
            cxx: clang++-12
            additional_cmake_options: -DCMAKE_CXX_CLANG_TIDY="clang-tidy-12"
            artifact_name: ubuntu-20.04

          - image: rurabori/diploma:debian-10
            cc: clang-11
            cxx: clang++-11
            additional_cmake_options: -DCMAKE_CXX_FLAGS="-stdlib=libc++"
            artifact_name: debian-10

    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}

    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
      CUDACXX: /usr/local/cuda/bin/nvcc
      CONAN_USER_HOME: ${{github.workspace}}

    steps:
      - uses: actions/checkout@v2

      # TODO: switch this to conan presets + cmakepresets eventually.
      - name: Cache Conan
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan
          key: ${{matrix.image}}-${{ runner.os }}-${{ hashFiles('conanfile.py') }}-${{ env.BUILD_TYPE }}-${{ env.CC }}-${{ env.CXX }}

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Denable_cuda_backend="OFF" ${{matrix.additional_cmake_options}} -G "Ninja"

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        run: ctest -C ${{env.BUILD_TYPE}} --test-dir ${{github.workspace}}/build

      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.artifact_name}}
          path: "${{github.workspace}}/build/apps/dim_cli/dim_cli"
            
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.artifact_name}}
          path: "${{github.workspace}}/build/apps/petsc_baseline/petsc_baseline"
